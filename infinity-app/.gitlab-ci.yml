stages: #the types of builds that can be run
  - mavenbuild
  - maventest
  - androidtry
  - androidtest
  - mavenDeploy

maven-build: #Backend build JOB
  stage: mavenbuild
  tags:
    - springboot_tag
  before_script:
    - export JAVA_HOME="/"
  script:
    - cd Backend/Infinity
    - mvn package
  allow_failure: true

maven-test: #A Second Job that we can use to Test backend
  stage: maventest
  tags:
    - springboot_tag
  before_script:
    - export JAVA_HOME="/"
  script:
    - cd Backend/Infinity
    - mvn test
  allow_failure: true
  artifacts:
    paths:
      - Backend/target/*.jar



android-build: #this is another job
  image: gjandres/android-ci:latest      # this is a directive to DOCKER
  stage: androidtry
  tags:
   - android_tag         #this is LINK to the docker runner on the remote-server        
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x ./Frontend/gradlew
  script:
    - cd Frontend
    - ./gradlew assemble

android-test:
  image:  gjandres/android-ci:latest
  stage: androidtest
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x ./Frontend/gradlew
  tags:
   - android_tag
  script:
    - cd Frontend
    - ./gradlew test

    # Below job builds, deploys, executes jar as service.
autoDeploy:
  stage: mavenDeploy  #do make a stage with same name!
  tags:
   - springboot_tag
  before_script:
   - export JAVA_HOME="/"
  script:
    - cd Backend/Infinity
    - mvn package
    - sudo mv target/*.jar /target/web-demo.jar 
    - sudo systemctl stop system-web-demo
    - sudo systemctl start system-web-demo

#basically builds, then copies the jar to the /target folder, then stops existing service, and finally restarts it.

